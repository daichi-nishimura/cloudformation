AWSTemplateFormatVersion: "2010-09-09"
Parameters: 
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: "AWS::EC2::KeyPair::KeyName"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: VPC-CFn

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGW-CFn

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  #SubNet
  PubSub1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: PubSub1-CFn

  PubSub2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: PubSub2-CFn

  PriSub1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: PriSub1-CFn

  PriSub2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: PriSub2-CFn

  #NAT
  NatGateway1EIP:        
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties: 
     Domain: vpc

  NatGateway2EIP: 
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PubSub1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PubSub2


  #Route
  PubSubRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PubSubRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PubSubRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  PubSub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSub1
      RouteTableId: !Ref PubSubRT

  PubSub2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSub2
      RouteTableId: !Ref PubSubRT
   
  PriSubRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PriSub-RT1

  PriSubRT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PriSub-RT2

  PriSubRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PriSubRT1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1


  PriSubRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PriSubRT2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PriSub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PriSub1
      RouteTableId: !Ref PriSubRT1

  PriSub2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PriSub2
      RouteTableId: !Ref PriSubRT2 

  #SecurityGroup
  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EC2-SG-CFn
      VpcId: !Ref VPC
      GroupDescription: SecurityGroup of EC2
      SecurityGroupIngress:
        # http
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # ssh
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: SecurityGroup of ALB
      Tags:
        - Key: Name
          Value: ALB-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"

  RDSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: SecurityGroup of RDS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: RDS-SG

  #EC2
  EC2a: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-00d101850e971728d
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PubSub1
          GroupSet:
            - !Ref EC2SG
      Tags:
          - Key: Name
            Value: EC2a
      
  EC2b: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-00d101850e971728d
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PubSub2
          GroupSet:
            - !Ref EC2SG
      Tags:
         - Key: Name
           Value: EC2b
  #RDS
  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: RDSCFn
      Port: 3306
      Engine: MySQL
      MasterUsername: root
      DBInstanceClass: db.t2.micro
      AvailabilityZone: ap-northeast-1a
      VPCSecurityGroups:
        - !Ref RDSSG
      DBSubnetGroupName: !Ref RDSSubnetGroup
      AllocatedStorage: 20
      MasterUserPassword: password

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription:  SubnetGroup of RDS
      SubnetIds: 
        - !Ref PriSub1
        - !Ref PriSub2  

  #ALB
  TargetGroup: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 10
      Matcher: 
        HttpCode: 200
      Tags: 
        - Key: Name
          Value: ALB-TargetGroup
      
      Targets: 
        - Id: !Ref EC2a
        - Id: !Ref EC2b
          Port: 80

  InternetALB: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Tags: 
        - Key: Name
          Value: ALB-Internet
      Scheme: internet-facing
  
      SecurityGroups:
        - !Ref ALBSG
      Subnets: 
        - !Ref PubSub1
        - !Ref PubSub2

  ALBListener: 
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref InternetALB
      Port: 80
      Protocol: HTTP
 

  

  
  

  
    


  